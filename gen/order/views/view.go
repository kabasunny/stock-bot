// Code generated by goa v3.22.1, DO NOT EDIT.
//
// order views
//
// Command:
// $ goa gen stock-bot/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StockOrder is the viewed result type that is projected based on a view.
type StockOrder struct {
	// Type to project
	Projected *StockOrderView
	// View to render
	View string
}

// StockOrderView is a type that runs validations on a projected type.
type StockOrderView struct {
	// 一意の注文ID
	OrderID *string
	// 銘柄コード
	Symbol *string
	// 取引種別
	TradeType *string
	// 注文種別
	OrderType *string
	// 注文数量
	Quantity *int
	// 指値価格
	Price *float64
	// 逆指値トリガー価格
	TriggerPrice *float64
	// 注文の有効期間
	TimeInForce *string
	// 注文ステータス
	OrderStatus *string
	// 信用取引かどうか
	IsMargin *bool
	// 作成タイムスタンプ
	CreatedAt *string
	// 更新タイムスタンプ
	UpdatedAt *string
}

var (
	// StockOrderMap is a map indexing the attribute names of StockOrder by view
	// name.
	StockOrderMap = map[string][]string{
		"default": {
			"order_id",
			"symbol",
			"trade_type",
			"order_type",
			"quantity",
			"price",
			"trigger_price",
			"time_in_force",
			"order_status",
			"is_margin",
			"created_at",
			"updated_at",
		},
	}
)

// ValidateStockOrder runs the validations defined on the viewed result type
// StockOrder.
func ValidateStockOrder(result *StockOrder) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStockOrderView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateStockOrderView runs the validations defined on StockOrderView using
// the "default" view.
func ValidateStockOrderView(result *StockOrderView) (err error) {
	if result.OrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_id", "result"))
	}
	if result.Symbol == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("symbol", "result"))
	}
	if result.TradeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trade_type", "result"))
	}
	if result.OrderType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_type", "result"))
	}
	if result.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("quantity", "result"))
	}
	if result.OrderStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_status", "result"))
	}
	if result.IsMargin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_margin", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	return
}
