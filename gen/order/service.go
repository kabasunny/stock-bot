// Code generated by goa v3.22.1, DO NOT EDIT.
//
// order service
//
// Command:
// $ goa gen stock-bot/design

package order

import (
	"context"
	orderviews "stock-bot/gen/order/views"
)

// 注文サービスは株式の注文操作を提供します。
type Service interface {
	// 新しい株式注文を作成します。
	NewOrder(context.Context, *NewOrderPayload) (res *StockOrder, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "stock"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "order"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"newOrder"}

// NewOrderPayload is the payload type of the order service newOrder method.
type NewOrderPayload struct {
	// 銘柄コード
	Symbol string
	// 取引種別
	TradeType string
	// 注文種別
	OrderType string
	// 注文数量
	Quantity int
	// 指値価格
	Price *float64
	// 逆指値トリガー価格
	TriggerPrice *float64
	// 注文の有効期間
	TimeInForce string
	// 信用取引かどうか
	IsMargin bool
}

// StockOrder is the result type of the order service newOrder method.
type StockOrder struct {
	// 一意の注文ID
	OrderID string
	// 銘柄コード
	Symbol string
	// 取引種別
	TradeType string
	// 注文種別
	OrderType string
	// 注文数量
	Quantity int
	// 指値価格
	Price *float64
	// 逆指値トリガー価格
	TriggerPrice *float64
	// 注文の有効期間
	TimeInForce *string
	// 注文ステータス
	OrderStatus string
	// 信用取引かどうか
	IsMargin bool
	// 作成タイムスタンプ
	CreatedAt string
	// 更新タイムスタンプ
	UpdatedAt string
}

// NewStockOrder initializes result type StockOrder from viewed result type
// StockOrder.
func NewStockOrder(vres *orderviews.StockOrder) *StockOrder {
	return newStockOrder(vres.Projected)
}

// NewViewedStockOrder initializes viewed result type StockOrder from result
// type StockOrder using the given view.
func NewViewedStockOrder(res *StockOrder, view string) *orderviews.StockOrder {
	p := newStockOrderView(res)
	return &orderviews.StockOrder{Projected: p, View: "default"}
}

// newStockOrder converts projected type StockOrder to service type StockOrder.
func newStockOrder(vres *orderviews.StockOrderView) *StockOrder {
	res := &StockOrder{
		Price:        vres.Price,
		TriggerPrice: vres.TriggerPrice,
		TimeInForce:  vres.TimeInForce,
	}
	if vres.OrderID != nil {
		res.OrderID = *vres.OrderID
	}
	if vres.Symbol != nil {
		res.Symbol = *vres.Symbol
	}
	if vres.TradeType != nil {
		res.TradeType = *vres.TradeType
	}
	if vres.OrderType != nil {
		res.OrderType = *vres.OrderType
	}
	if vres.Quantity != nil {
		res.Quantity = *vres.Quantity
	}
	if vres.OrderStatus != nil {
		res.OrderStatus = *vres.OrderStatus
	}
	if vres.IsMargin != nil {
		res.IsMargin = *vres.IsMargin
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	return res
}

// newStockOrderView projects result type StockOrder to projected type
// StockOrderView using the "default" view.
func newStockOrderView(res *StockOrder) *orderviews.StockOrderView {
	vres := &orderviews.StockOrderView{
		OrderID:      &res.OrderID,
		Symbol:       &res.Symbol,
		TradeType:    &res.TradeType,
		OrderType:    &res.OrderType,
		Quantity:     &res.Quantity,
		Price:        res.Price,
		TriggerPrice: res.TriggerPrice,
		TimeInForce:  res.TimeInForce,
		OrderStatus:  &res.OrderStatus,
		IsMargin:     &res.IsMargin,
		CreatedAt:    &res.CreatedAt,
		UpdatedAt:    &res.UpdatedAt,
	}
	return vres
}
