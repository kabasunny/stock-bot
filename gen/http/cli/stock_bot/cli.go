// Code generated by goa v3.22.1, DO NOT EDIT.
//
// stock-bot HTTP client CLI support package
//
// Command:
// $ goa gen stock-bot/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	balancec "stock-bot/gen/http/balance/client"
	orderc "stock-bot/gen/http/order/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"balance (summary|can-entry)",
		"order new-order",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` balance summary` + "\n" +
		os.Args[0] + ` order new-order --body '{
      "is_margin": true,
      "order_type": "LIMIT",
      "price": 3000.5,
      "quantity": 100,
      "symbol": "9432",
      "time_in_force": "DAY",
      "trade_type": "BUY",
      "trigger_price": 3100
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		balanceFlags = flag.NewFlagSet("balance", flag.ContinueOnError)

		balanceSummaryFlags = flag.NewFlagSet("summary", flag.ExitOnError)

		balanceCanEntryFlags         = flag.NewFlagSet("can-entry", flag.ExitOnError)
		balanceCanEntryIssueCodeFlag = balanceCanEntryFlags.String("issue-code", "REQUIRED", "銘柄コード")

		orderFlags = flag.NewFlagSet("order", flag.ContinueOnError)

		orderNewOrderFlags    = flag.NewFlagSet("new-order", flag.ExitOnError)
		orderNewOrderBodyFlag = orderNewOrderFlags.String("body", "REQUIRED", "")
	)
	balanceFlags.Usage = balanceUsage
	balanceSummaryFlags.Usage = balanceSummaryUsage
	balanceCanEntryFlags.Usage = balanceCanEntryUsage

	orderFlags.Usage = orderUsage
	orderNewOrderFlags.Usage = orderNewOrderUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "balance":
			svcf = balanceFlags
		case "order":
			svcf = orderFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "balance":
			switch epn {
			case "summary":
				epf = balanceSummaryFlags

			case "can-entry":
				epf = balanceCanEntryFlags

			}

		case "order":
			switch epn {
			case "new-order":
				epf = orderNewOrderFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "balance":
			c := balancec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "summary":
				endpoint = c.Summary()
			case "can-entry":
				endpoint = c.CanEntry()
				data, err = balancec.BuildCanEntryPayload(*balanceCanEntryIssueCodeFlag)
			}
		case "order":
			c := orderc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "new-order":
				endpoint = c.NewOrder()
				data, err = orderc.BuildNewOrderPayload(*orderNewOrderBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// balanceUsage displays the usage of the balance command and its subcommands.
func balanceUsage() {
	fmt.Fprintf(os.Stderr, `残高サービスは口座の残高情報を提供します。
Usage:
    %[1]s [globalflags] balance COMMAND [flags]

COMMAND:
    summary: 口座の残高サマリーを取得します。
    can-entry: 指定した銘柄にエントリー可能か判断します。

Additional help:
    %[1]s balance COMMAND --help
`, os.Args[0])
}
func balanceSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] balance summary

口座の残高サマリーを取得します。

Example:
    %[1]s balance summary
`, os.Args[0])
}

func balanceCanEntryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] balance can-entry -issue-code STRING

指定した銘柄にエントリー可能か判断します。
    -issue-code STRING: 銘柄コード

Example:
    %[1]s balance can-entry --issue-code "Error quaerat quibusdam sequi mollitia nihil."
`, os.Args[0])
}

// orderUsage displays the usage of the order command and its subcommands.
func orderUsage() {
	fmt.Fprintf(os.Stderr, `注文サービスは株式の注文操作を提供します。
Usage:
    %[1]s [globalflags] order COMMAND [flags]

COMMAND:
    new-order: 新しい株式注文を作成します。

Additional help:
    %[1]s order COMMAND --help
`, os.Args[0])
}
func orderNewOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order new-order -body JSON

新しい株式注文を作成します。
    -body JSON: 

Example:
    %[1]s order new-order --body '{
      "is_margin": true,
      "order_type": "LIMIT",
      "price": 3000.5,
      "quantity": 100,
      "symbol": "9432",
      "time_in_force": "DAY",
      "trade_type": "BUY",
      "trigger_price": 3100
   }'
`, os.Args[0])
}
