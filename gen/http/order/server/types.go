// Code generated by goa v3.22.1, DO NOT EDIT.
//
// order HTTP server types
//
// Command:
// $ goa gen stock-bot/design

package server

import (
	order "stock-bot/gen/order"
	orderviews "stock-bot/gen/order/views"

	goa "goa.design/goa/v3/pkg"
)

// NewOrderRequestBody is the type of the "order" service "newOrder" endpoint
// HTTP request body.
type NewOrderRequestBody struct {
	// 銘柄コード
	Symbol *string `form:"symbol,omitempty" json:"symbol,omitempty" xml:"symbol,omitempty"`
	// 取引種別
	TradeType *string `form:"trade_type,omitempty" json:"trade_type,omitempty" xml:"trade_type,omitempty"`
	// 注文種別
	OrderType *string `form:"order_type,omitempty" json:"order_type,omitempty" xml:"order_type,omitempty"`
	// 注文数量
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// 指値価格
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// 逆指値トリガー価格
	TriggerPrice *float64 `form:"trigger_price,omitempty" json:"trigger_price,omitempty" xml:"trigger_price,omitempty"`
	// 注文の有効期間
	TimeInForce *string `form:"time_in_force,omitempty" json:"time_in_force,omitempty" xml:"time_in_force,omitempty"`
	// 信用取引かどうか
	IsMargin *bool `form:"is_margin,omitempty" json:"is_margin,omitempty" xml:"is_margin,omitempty"`
}

// NewOrderResponseBody is the type of the "order" service "newOrder" endpoint
// HTTP response body.
type NewOrderResponseBody struct {
	// 一意の注文ID
	OrderID string `form:"order_id" json:"order_id" xml:"order_id"`
	// 銘柄コード
	Symbol string `form:"symbol" json:"symbol" xml:"symbol"`
	// 取引種別
	TradeType string `form:"trade_type" json:"trade_type" xml:"trade_type"`
	// 注文種別
	OrderType string `form:"order_type" json:"order_type" xml:"order_type"`
	// 注文数量
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
	// 指値価格
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// 逆指値トリガー価格
	TriggerPrice *float64 `form:"trigger_price,omitempty" json:"trigger_price,omitempty" xml:"trigger_price,omitempty"`
	// 注文の有効期間
	TimeInForce *string `form:"time_in_force,omitempty" json:"time_in_force,omitempty" xml:"time_in_force,omitempty"`
	// 注文ステータス
	OrderStatus string `form:"order_status" json:"order_status" xml:"order_status"`
	// 信用取引かどうか
	IsMargin bool `form:"is_margin" json:"is_margin" xml:"is_margin"`
	// 作成タイムスタンプ
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新タイムスタンプ
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewNewOrderResponseBody builds the HTTP response body from the result of the
// "newOrder" endpoint of the "order" service.
func NewNewOrderResponseBody(res *orderviews.StockOrderView) *NewOrderResponseBody {
	body := &NewOrderResponseBody{
		OrderID:      *res.OrderID,
		Symbol:       *res.Symbol,
		TradeType:    *res.TradeType,
		OrderType:    *res.OrderType,
		Quantity:     *res.Quantity,
		Price:        res.Price,
		TriggerPrice: res.TriggerPrice,
		TimeInForce:  res.TimeInForce,
		OrderStatus:  *res.OrderStatus,
		IsMargin:     *res.IsMargin,
		CreatedAt:    *res.CreatedAt,
		UpdatedAt:    *res.UpdatedAt,
	}
	return body
}

// NewNewOrderPayload builds a order service newOrder endpoint payload.
func NewNewOrderPayload(body *NewOrderRequestBody) *order.NewOrderPayload {
	v := &order.NewOrderPayload{
		Symbol:       *body.Symbol,
		TradeType:    *body.TradeType,
		OrderType:    *body.OrderType,
		Quantity:     *body.Quantity,
		Price:        body.Price,
		TriggerPrice: body.TriggerPrice,
	}
	if body.TimeInForce != nil {
		v.TimeInForce = *body.TimeInForce
	}
	if body.IsMargin != nil {
		v.IsMargin = *body.IsMargin
	}
	if body.TimeInForce == nil {
		v.TimeInForce = "DAY"
	}
	if body.IsMargin == nil {
		v.IsMargin = false
	}

	return v
}

// ValidateNewOrderRequestBody runs the validations defined on
// NewOrderRequestBody
func ValidateNewOrderRequestBody(body *NewOrderRequestBody) (err error) {
	if body.Symbol == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("symbol", "body"))
	}
	if body.TradeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trade_type", "body"))
	}
	if body.OrderType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_type", "body"))
	}
	if body.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("quantity", "body"))
	}
	if body.TradeType != nil {
		if !(*body.TradeType == "BUY" || *body.TradeType == "SELL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.trade_type", *body.TradeType, []any{"BUY", "SELL"}))
		}
	}
	if body.OrderType != nil {
		if !(*body.OrderType == "MARKET" || *body.OrderType == "LIMIT" || *body.OrderType == "STOP" || *body.OrderType == "STOP_LIMIT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.order_type", *body.OrderType, []any{"MARKET", "LIMIT", "STOP", "STOP_LIMIT"}))
		}
	}
	if body.TimeInForce != nil {
		if !(*body.TimeInForce == "DAY") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.time_in_force", *body.TimeInForce, []any{"DAY"}))
		}
	}
	return
}
