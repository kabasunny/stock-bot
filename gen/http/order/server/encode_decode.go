// Code generated by goa v3.22.1, DO NOT EDIT.
//
// order HTTP server encoders and decoders
//
// Command:
// $ goa gen stock-bot/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	order "stock-bot/gen/order"
	orderviews "stock-bot/gen/order/views"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeNewOrderResponse returns an encoder for responses returned by the
// order newOrder endpoint.
func EncodeNewOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*orderviews.StockOrder)
		enc := encoder(ctx, w)
		body := NewNewOrderResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeNewOrderRequest returns a decoder for requests sent to the order
// newOrder endpoint.
func DecodeNewOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*order.NewOrderPayload, error) {
	return func(r *http.Request) (*order.NewOrderPayload, error) {
		var (
			body NewOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateNewOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewNewOrderPayload(&body)

		return payload, nil
	}
}
