// Code generated by goa v3.22.1, DO NOT EDIT.
//
// order HTTP client types
//
// Command:
// $ goa gen stock-bot/design

package client

import (
	order "stock-bot/gen/order"
	orderviews "stock-bot/gen/order/views"
)

// NewOrderRequestBody is the type of the "order" service "newOrder" endpoint
// HTTP request body.
type NewOrderRequestBody struct {
	// 銘柄コード
	Symbol string `form:"symbol" json:"symbol" xml:"symbol"`
	// 取引種別
	TradeType string `form:"trade_type" json:"trade_type" xml:"trade_type"`
	// 注文種別
	OrderType string `form:"order_type" json:"order_type" xml:"order_type"`
	// 注文数量
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
	// 指値価格
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// 逆指値トリガー価格
	TriggerPrice *float64 `form:"trigger_price,omitempty" json:"trigger_price,omitempty" xml:"trigger_price,omitempty"`
	// 注文の有効期間
	TimeInForce string `form:"time_in_force" json:"time_in_force" xml:"time_in_force"`
	// 信用取引かどうか
	IsMargin bool `form:"is_margin" json:"is_margin" xml:"is_margin"`
}

// NewOrderResponseBody is the type of the "order" service "newOrder" endpoint
// HTTP response body.
type NewOrderResponseBody struct {
	// 一意の注文ID
	OrderID *string `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 銘柄コード
	Symbol *string `form:"symbol,omitempty" json:"symbol,omitempty" xml:"symbol,omitempty"`
	// 取引種別
	TradeType *string `form:"trade_type,omitempty" json:"trade_type,omitempty" xml:"trade_type,omitempty"`
	// 注文種別
	OrderType *string `form:"order_type,omitempty" json:"order_type,omitempty" xml:"order_type,omitempty"`
	// 注文数量
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// 指値価格
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// 逆指値トリガー価格
	TriggerPrice *float64 `form:"trigger_price,omitempty" json:"trigger_price,omitempty" xml:"trigger_price,omitempty"`
	// 注文の有効期間
	TimeInForce *string `form:"time_in_force,omitempty" json:"time_in_force,omitempty" xml:"time_in_force,omitempty"`
	// 注文ステータス
	OrderStatus *string `form:"order_status,omitempty" json:"order_status,omitempty" xml:"order_status,omitempty"`
	// 信用取引かどうか
	IsMargin *bool `form:"is_margin,omitempty" json:"is_margin,omitempty" xml:"is_margin,omitempty"`
	// 作成タイムスタンプ
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新タイムスタンプ
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewNewOrderRequestBody builds the HTTP request body from the payload of the
// "newOrder" endpoint of the "order" service.
func NewNewOrderRequestBody(p *order.NewOrderPayload) *NewOrderRequestBody {
	body := &NewOrderRequestBody{
		Symbol:       p.Symbol,
		TradeType:    p.TradeType,
		OrderType:    p.OrderType,
		Quantity:     p.Quantity,
		Price:        p.Price,
		TriggerPrice: p.TriggerPrice,
		TimeInForce:  p.TimeInForce,
		IsMargin:     p.IsMargin,
	}
	{
		var zero string
		if body.TimeInForce == zero {
			body.TimeInForce = "DAY"
		}
	}
	{
		var zero bool
		if body.IsMargin == zero {
			body.IsMargin = false
		}
	}
	return body
}

// NewNewOrderStockOrderCreated builds a "order" service "newOrder" endpoint
// result from a HTTP "Created" response.
func NewNewOrderStockOrderCreated(body *NewOrderResponseBody) *orderviews.StockOrderView {
	v := &orderviews.StockOrderView{
		OrderID:      body.OrderID,
		Symbol:       body.Symbol,
		TradeType:    body.TradeType,
		OrderType:    body.OrderType,
		Quantity:     body.Quantity,
		Price:        body.Price,
		TriggerPrice: body.TriggerPrice,
		TimeInForce:  body.TimeInForce,
		OrderStatus:  body.OrderStatus,
		IsMargin:     body.IsMargin,
		CreatedAt:    body.CreatedAt,
		UpdatedAt:    body.UpdatedAt,
	}

	return v
}
