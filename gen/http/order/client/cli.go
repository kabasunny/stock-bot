// Code generated by goa v3.22.1, DO NOT EDIT.
//
// order HTTP client CLI support package
//
// Command:
// $ goa gen stock-bot/design

package client

import (
	"encoding/json"
	"fmt"
	order "stock-bot/gen/order"

	goa "goa.design/goa/v3/pkg"
)

// BuildNewOrderPayload builds the payload for the order newOrder endpoint from
// CLI flags.
func BuildNewOrderPayload(orderNewOrderBody string) (*order.NewOrderPayload, error) {
	var err error
	var body NewOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderNewOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"is_margin\": true,\n      \"order_type\": \"LIMIT\",\n      \"price\": 3000.5,\n      \"quantity\": 100,\n      \"symbol\": \"9432\",\n      \"time_in_force\": \"DAY\",\n      \"trade_type\": \"BUY\",\n      \"trigger_price\": 3100\n   }'")
		}
		if !(body.TradeType == "BUY" || body.TradeType == "SELL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.trade_type", body.TradeType, []any{"BUY", "SELL"}))
		}
		if !(body.OrderType == "MARKET" || body.OrderType == "LIMIT" || body.OrderType == "STOP" || body.OrderType == "STOP_LIMIT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.order_type", body.OrderType, []any{"MARKET", "LIMIT", "STOP", "STOP_LIMIT"}))
		}
		if !(body.TimeInForce == "DAY") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.time_in_force", body.TimeInForce, []any{"DAY"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.NewOrderPayload{
		Symbol:       body.Symbol,
		TradeType:    body.TradeType,
		OrderType:    body.OrderType,
		Quantity:     body.Quantity,
		Price:        body.Price,
		TriggerPrice: body.TriggerPrice,
		TimeInForce:  body.TimeInForce,
		IsMargin:     body.IsMargin,
	}
	{
		var zero string
		if v.TimeInForce == zero {
			v.TimeInForce = "DAY"
		}
	}
	{
		var zero bool
		if v.IsMargin == zero {
			v.IsMargin = false
		}
	}

	return v, nil
}
