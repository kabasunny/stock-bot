// Code generated by goa v3.22.1, DO NOT EDIT.
//
// balance service
//
// Command:
// $ goa gen stock-bot/design

package balance

import (
	"context"
	balanceviews "stock-bot/gen/balance/views"
)

// 残高サービスは口座の残高情報を提供します。
type Service interface {
	// 口座の残高サマリーを取得します。
	Summary(context.Context) (res *StockBalanceSummary, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "stock"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "balance"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"summary"}

// StockBalanceSummary is the result type of the balance service summary method.
type StockBalanceSummary struct {
	// 総資産 (円)
	TotalAssets float64
	// 現物買付可能額 (円)
	CashBuyingPower float64
	// 信用新規建可能額 (円)
	MarginBuyingPower float64
	// 出金可能額 (円)
	WithdrawalPossibleAmount float64
	// 委託保証金率 (%)
	MarginRate float64
	// 最終更新日時
	UpdatedAt string
}

// NewStockBalanceSummary initializes result type StockBalanceSummary from
// viewed result type StockBalanceSummary.
func NewStockBalanceSummary(vres *balanceviews.StockBalanceSummary) *StockBalanceSummary {
	return newStockBalanceSummary(vres.Projected)
}

// NewViewedStockBalanceSummary initializes viewed result type
// StockBalanceSummary from result type StockBalanceSummary using the given
// view.
func NewViewedStockBalanceSummary(res *StockBalanceSummary, view string) *balanceviews.StockBalanceSummary {
	p := newStockBalanceSummaryView(res)
	return &balanceviews.StockBalanceSummary{Projected: p, View: "default"}
}

// newStockBalanceSummary converts projected type StockBalanceSummary to
// service type StockBalanceSummary.
func newStockBalanceSummary(vres *balanceviews.StockBalanceSummaryView) *StockBalanceSummary {
	res := &StockBalanceSummary{}
	if vres.TotalAssets != nil {
		res.TotalAssets = *vres.TotalAssets
	}
	if vres.CashBuyingPower != nil {
		res.CashBuyingPower = *vres.CashBuyingPower
	}
	if vres.MarginBuyingPower != nil {
		res.MarginBuyingPower = *vres.MarginBuyingPower
	}
	if vres.WithdrawalPossibleAmount != nil {
		res.WithdrawalPossibleAmount = *vres.WithdrawalPossibleAmount
	}
	if vres.MarginRate != nil {
		res.MarginRate = *vres.MarginRate
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	return res
}

// newStockBalanceSummaryView projects result type StockBalanceSummary to
// projected type StockBalanceSummaryView using the "default" view.
func newStockBalanceSummaryView(res *StockBalanceSummary) *balanceviews.StockBalanceSummaryView {
	vres := &balanceviews.StockBalanceSummaryView{
		TotalAssets:              &res.TotalAssets,
		CashBuyingPower:          &res.CashBuyingPower,
		MarginBuyingPower:        &res.MarginBuyingPower,
		WithdrawalPossibleAmount: &res.WithdrawalPossibleAmount,
		MarginRate:               &res.MarginRate,
		UpdatedAt:                &res.UpdatedAt,
	}
	return vres
}
