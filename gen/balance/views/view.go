// Code generated by goa v3.22.1, DO NOT EDIT.
//
// balance views
//
// Command:
// $ goa gen stock-bot/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StockBalanceSummary is the viewed result type that is projected based on a
// view.
type StockBalanceSummary struct {
	// Type to project
	Projected *StockBalanceSummaryView
	// View to render
	View string
}

// StockBalanceSummaryView is a type that runs validations on a projected type.
type StockBalanceSummaryView struct {
	// 総資産 (円)
	TotalAssets *float64
	// 現物買付可能額 (円)
	CashBuyingPower *float64
	// 信用新規建可能額 (円)
	MarginBuyingPower *float64
	// 出金可能額 (円)
	WithdrawalPossibleAmount *float64
	// 委託保証金率 (%)
	MarginRate *float64
	// 最終更新日時
	UpdatedAt *string
}

var (
	// StockBalanceSummaryMap is a map indexing the attribute names of
	// StockBalanceSummary by view name.
	StockBalanceSummaryMap = map[string][]string{
		"default": {
			"total_assets",
			"cash_buying_power",
			"margin_buying_power",
			"withdrawal_possible_amount",
			"margin_rate",
			"updated_at",
		},
	}
)

// ValidateStockBalanceSummary runs the validations defined on the viewed
// result type StockBalanceSummary.
func ValidateStockBalanceSummary(result *StockBalanceSummary) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStockBalanceSummaryView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateStockBalanceSummaryView runs the validations defined on
// StockBalanceSummaryView using the "default" view.
func ValidateStockBalanceSummaryView(result *StockBalanceSummaryView) (err error) {
	if result.TotalAssets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_assets", "result"))
	}
	if result.CashBuyingPower == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cash_buying_power", "result"))
	}
	if result.MarginBuyingPower == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("margin_buying_power", "result"))
	}
	if result.WithdrawalPossibleAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("withdrawal_possible_amount", "result"))
	}
	if result.MarginRate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("margin_rate", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	return
}
